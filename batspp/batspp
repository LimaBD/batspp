#!/usr/bin/env python3
#
# BATSPP
#
# Shell style tests using bats-core
#
## TODO: implement setup and teardown bats functions
## TODO: solve: tests can fail if they are saved with --output and dependency is not found
## TODO: implement -v and --version flags
## TODO: upgrade docstring
## TODO: add timer and print execution time
## TODO: set soft/hard interpretation with is_test_file to comment tests
## TODO: implement tags e.g. <blank>
## TODO: use a separate pass of the test source to fill in the missing test names.
## TODO: implement --discover flag to discover all tests file in a folder.


"""
BATSPP

Shell style tests using bats-core

You can run tests for aliases and more using the
command line with '$ [command]' followed by the
expected output:

 $ echo -e "hello\nworld"
 hello
 world

 $ echo "this is a test" | wc -c
 15

Also you can test bash functions:
 [functions + args] => [expected]:
 fibonacci 9 => "0 1 1 2 3 5 8 13 21 34"
"""


# Standard packages
import re


# Installed packages
from mezcla.main import Main
from mezcla import system
from mezcla import debug
from mezcla import glue_helpers as gh


# Local modules
from lexer import Lexer
from parser import Parser
from interpreter import Interpreter


# Command-line labels constants
FILE = 'file'
SAVE = 'save'
SOURCE = 'source'
OUTPUT = 'output'
VERBOSE = 'verbose'


# Some constants
BATSPP_EXTENSION = 'batspp'
BATS_EXTENSION = 'bats'


class Batspp(Main):
    """Argument processing class"""

    # Class-level member variables for arguments
    # (avoids need for class constructor)
    file = ''
    save_path = ''
    source = ''
    output = False
    verbose = False

    def setup(self):
        """Process arguments"""

        # Check the command-line options
        self.file = self.get_parsed_argument(FILE, self.file)
        self.save_path = self.get_parsed_argument(SAVE, self.save_path)
        self.source = self.get_parsed_argument(SOURCE, self.source)
        self.output = self.has_parsed_option(OUTPUT)
        self.verbose = self.has_parsed_option(VERBOSE)

        debug.trace(7, (f'batspp.setup({self}) - \n'
                        f'\t{FILE}: {self.file},\n'
                        f'\t{SAVE}: {self.save_path},\n'
                        f'\t{SOURCE}: {self.source},\n'
                        f'\t{OUTPUT}: {self.output},\n'
                        f'\t{VERBOSE}: {self.verbose}'))

    def run_main_step(self):
        """Process main script"""

        # Append bats file header
        bats_content = ('#!/usr/bin/env bats\n'
                        '#\n'
                        '# This test file was generated using Batspp\n'
                        '# https://github.com/LimaBD/batspp\n'
                        '#\n\n')

        # Append files to be sourced/load (using args)
        if self.source:
            bats_content += ('# Load sources\n'
                             'shopt -s expand_aliases\n'
                             f'source {self.source}\n\n')

        # Process file content
        is_test_file = self.file.endswith(f'.{BATSPP_EXTENSION}')
        file_content = system.read_file(self.file)
        tokens = Lexer().tokenize(file_content, embedded_tests=not is_test_file)
        abstract_syntax_tree = Parser().parse(tokens)
        root_required, bats_body = Interpreter().interpret(abstract_syntax_tree, verbose=self.verbose)

        # Check for bats_body content
        if not bats_body:
            print(f'Not founded tests on file {self.file}')
            return
        bats_content += bats_body

        # Set Bats filename to save
        self.save_path = self.save_path if self.save_path else self.temp_file
        if self.save_path.endswith('/'):
            filename = re.search(r"\/(\w+)\.", self.file).group(0)
            self.save_path += f'{filename}.{BATS_EXTENSION}'

        gh.write_file(self.save_path, bats_content)
        gh.run(f'chmod +x {self.save_path}')

        # Print direct generated Bats file
        if self.output:
            print(bats_content)

        # Run generated Bats file
        else:
            sudo = 'sudo' if root_required else ''
            debug.trace(7, f'batspp - running test {self.save_path}')
            print(gh.run(f'{sudo} bats {self.save_path}'))


if __name__ == '__main__':
    app = Batspp(description = __doc__,
                 positional_arguments = [(FILE, 'filename')],
                 boolean_options = [(OUTPUT, 'print output test'),
                                    (VERBOSE, 'print verbose debug')],
                 text_options = [(SAVE, 'specifies path to save the generated bats file'),
                                 (SOURCE, 'specifies file to be sourced')],
                 manual_input = True)
    app.run()
